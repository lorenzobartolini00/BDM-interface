.program bdm_sync
.side_set 1 opt

    set pindirs, 1      side 0
    set x, 30           
wait_128:
    jmp x-- wait_128            [3]     ; 1 + 1 + (31 * 4) + 2 = 128 cycles 
    nop                         [1]     ; Hold pin low for 128 cycles
    nop                 side 1          ; Speed-up pulse
    set pindirs, 0                      ; Removes all drive to the BKGD pin so it reverts to high impedance
    wait 0 pin 1                        ; Wait for the pin to go low(input mapping is used)
    in null 32                          ; Start timer
    wait 1 pin 1                        ; Wait for the pin to go back to high
    in null 32                          ; Stop timer


% c-sdk {

// Helper function (for use in C program) to initialize this PIO program
void bdm_sync_program_init(PIO pio, uint sm, uint offset, uint data_pin, float div) {

    // Sets up state machine and wrap target. This function is automatically
    // generated in bdm.pio.h.
    pio_sm_config c = bdm_sync_program_get_default_config(offset);

    // Connect pin to SIDE-SET pin (control with 'side-set' instruction)
    sm_config_set_sideset_pins(&c, data_pin);

    // Connect pin to IN pin (control with 'in' instruction)
    sm_config_set_in_pins(&c, data_pin);

    // Allow PIO to control GPIO pin (as output)
    pio_gpio_init(pio, data_pin);

    // Set the initial pin direction as output (in PIO) 
    pio_sm_set_consecutive_pindirs(pio, sm, data_pin, 1, true);
    
    // Set the clock divider for the state machine
    sm_config_set_clkdiv(&c, div);

    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}

%}
    
