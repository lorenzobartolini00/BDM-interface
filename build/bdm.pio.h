// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --- //
// bdm //
// --- //

#define bdm_wrap_target 0
#define bdm_wrap 7

static const uint16_t bdm_program_instructions[] = {
            //     .wrap_target
    0x7121, //  0: out    x, 1            side 0 [1] 
    0x0124, //  1: jmp    !x, 4                  [1] 
    0xbf42, //  2: nop                    side 1 [7] 
    0x0006, //  3: jmp    6                          
    0xa742, //  4: nop                           [7] 
    0xa042, //  5: nop                               
    0xb942, //  6: nop                    side 1 [1] 
    0x80e0, //  7: pull   ifempty block              
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program bdm_program = {
    .instructions = bdm_program_instructions,
    .length = 8,
    .origin = -1,
};

static inline pio_sm_config bdm_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + bdm_wrap_target, offset + bdm_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

// Helper function (for use in C program) to initialize this PIO program
void bdm_program_init(PIO pio, uint sm, uint offset, uint data_pin, float div, bool shift_right, bool autopull, uint pull_threshold) {
    // Sets up state machine and wrap target. This function is automatically
    // generated in bdm.pio.h.
    pio_sm_config c = bdm_program_get_default_config(offset);
    // Connect debug pin to SIDE-SET pin (control with 'side-set' instruction)
    sm_config_set_sideset_pins(&c, data_pin);
    // Set data pin and clock pin to output
    // Allow PIO to control GPIO pin (as output)
    pio_gpio_init(pio, data_pin);
    // Set the pin direction (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, data_pin, 1, true);
    // Set the clock divider for the state machine
    sm_config_set_clkdiv(&c, div);
    // Set shift count threshold
    sm_config_set_out_shift(&c, shift_right, autopull, pull_threshold);
    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}

#endif

