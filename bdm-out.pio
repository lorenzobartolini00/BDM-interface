.program bdm_out
.side_set 1 opt

; Shift out data on data pin. Stall with pin high. After tx FIFO is filled by system, 
; pin goes low, starting the transmission.

.wrap_target
bit_loop:
    pull ifempty         side 1         ; pull data from tx fifo to OSR if OSR is "empty". Empty means that the total output shift count has reached its threshold. Stall if tx fifo is empty(block = 1 by default).
    out x,  1            side 0  [1]    ; pin BKGD goes low for 4 cycles
    jmp !x  keep_low             [1]    ; NOTE: if Delay is 2, the pin is held low for 5 cycles and not 4. 
    nop                  side 1  [7]    ; If 1 is transmitted, pin BKGD goes back to high state after 4 cycles
    jmp     end_bit                         
keep_low:
    nop                           [7]   ; If 0 is transmitted, hold pin BKGD low for 9 cycles
    nop                           
end_bit:
    nop                  side 1         ; pin BKGD goes high for the last 3 cycles. If was high before, side set operation does not take place        
    jmp !osre bit_loop                   ; If osr is not empty(osr_count < pull_threshold), go back to bit_loop, otherwise, do dummy read to flag the end of the transmission
    in null 32                          ; Shift 32 zeros in ISR. Since autopush is enable, data is transferred from ISR to RX FIFO at this very clock cycle
.wrap


% c-sdk {

// Helper function (for use in C program) to initialize this PIO program
void bdm_out_program_init(PIO pio, uint sm, uint offset, uint data_pin, float div, bool shift_right, bool autopull, uint pull_threshold) {

    // Sets up state machine and wrap target. This function is automatically
    // generated in bdm.pio.h.
    pio_sm_config c = bdm_out_program_get_default_config(offset);

    // Connect debug pin to SIDE-SET pin (control with 'side-set' instruction)
    sm_config_set_sideset_pins(&c, data_pin);

    // Set data pin to output
    // Allow PIO to control GPIO pin (as output)
    pio_gpio_init(pio, data_pin);

    // Set the pin direction (in PIO)
    pio_sm_set_consecutive_pindirs(pio, sm, data_pin, 1, true);
    
    // Set the clock divider for the state machine
    sm_config_set_clkdiv(&c, div);

    // Set shift pull count threshold
    sm_config_set_out_shift(&c, shift_right, autopull, pull_threshold);

    // Set shift push count threshold(only for dummy read). Autopush is enabled when 32 bit are shifted in.
    sm_config_set_in_shift(&c, true, true, 32);

    // Load configuration and jump to start of the program
    pio_sm_init(pio, sm, offset, &c);
}

%}